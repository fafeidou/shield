apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: pvs-demo-
spec:
  entrypoint: main
  volumeClaimTemplates:
    - metadata:
        name: shared-workdir  # 共享的 PVC 名称
      spec:
        accessModes: ["ReadWriteMany"]  # 多个 Pod 可以同时读取和写入
        resources:
          requests:
            storage: 1Gi
  templates:
    - name: main
      dag:
        tasks:
          - name: git-clone
            template: git-clone
          - name: process-files
            template: process-files
            dependencies: [git-clone]  # 依赖 git-clone 任务

    - name: git-clone
      container:
        image: my-custom-alpine-with-git:v1
        command: [sh, -c]
        args:
          - |
            git clone https://gitee.com/qfxcoffee/shield.git /src
            ls -la /src
            cp -r /src/. /mnt/  # 将文件复制到挂载的 PVC 中
        volumeMounts:
          - name: shared-workdir  # 挂载 PVC
            mountPath: /mnt  # 挂载到容器的 /mnt 目录

    - name: process-files
      container:
        image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/gcr.io/kaniko-project/executor:v1.23.1  # Kaniko 镜像
        command: [ "/kaniko/executor" ]
        args:
          - "--context=/mnt/sh/docker_study"  # Git clone 的目录
          - "--dockerfile=Dockerfile"  # Dockerfile 路径
          - "--destination=192.168.56.115:5000/test-image:v2"  # 镜像名称和标签
          - "--build-arg=WORKDIR_PATH=/home/test"    # 可选的 Docker 构建参数
          - "--build-arg=ENTRYPOINT_PATH=/home/test/start-dev.sh"
          - "--skip-tls-verify"  # 跳过 TLS 验证（如果使用 HTTP 协议）
          - "--oci-layout-path=/kaniko/oci-layout"  # 用于构建镜像时存储 OCI 规范镜像文件
          - "--log-level=debug"  # 启用缓存
        volumeMounts:
          - name: shared-workdir  # 挂载相同的 PVC
            mountPath: /mnt  # 挂载到容器的 /mnt 目录
